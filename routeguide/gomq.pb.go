// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gomq.proto

/*
Package routeguide is a generated protocol buffer package.

It is generated from these files:
	gomq.proto

It has these top-level messages:
	Identification
	RecordSet
	Record
	Subscription
	PublishRecord
	Result
	Message
*/
package routeguide

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Identification struct {
	ConsumerID string `protobuf:"bytes,1,opt,name=consumerID" json:"consumerID,omitempty"`
}

func (m *Identification) Reset()                    { *m = Identification{} }
func (m *Identification) String() string            { return proto.CompactTextString(m) }
func (*Identification) ProtoMessage()               {}
func (*Identification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Identification) GetConsumerID() string {
	if m != nil {
		return m.ConsumerID
	}
	return ""
}

type RecordSet struct {
	Records []*Record `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *RecordSet) Reset()                    { *m = RecordSet{} }
func (m *RecordSet) String() string            { return proto.CompactTextString(m) }
func (*RecordSet) ProtoMessage()               {}
func (*RecordSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RecordSet) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

type Record struct {
	Key   string   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *Message `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Record) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Record) GetValue() *Message {
	if m != nil {
		return m.Value
	}
	return nil
}

type Subscription struct {
	Key        string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	ConsumerID string `protobuf:"bytes,2,opt,name=consumerID" json:"consumerID,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Subscription) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Subscription) GetConsumerID() string {
	if m != nil {
		return m.ConsumerID
	}
	return ""
}

type PublishRecord struct {
	Key     string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PublishRecord) Reset()                    { *m = PublishRecord{} }
func (m *PublishRecord) String() string            { return proto.CompactTextString(m) }
func (*PublishRecord) ProtoMessage()               {}
func (*PublishRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PublishRecord) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PublishRecord) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Result struct {
	Code int32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Result) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type Message struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Payload   []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Message) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Message) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Identification)(nil), "routeguide.Identification")
	proto.RegisterType((*RecordSet)(nil), "routeguide.RecordSet")
	proto.RegisterType((*Record)(nil), "routeguide.Record")
	proto.RegisterType((*Subscription)(nil), "routeguide.Subscription")
	proto.RegisterType((*PublishRecord)(nil), "routeguide.PublishRecord")
	proto.RegisterType((*Result)(nil), "routeguide.Result")
	proto.RegisterType((*Message)(nil), "routeguide.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RouteGuide service

type RouteGuideClient interface {
	Publish(ctx context.Context, in *PublishRecord, opts ...grpc.CallOption) (*Result, error)
	Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Result, error)
	Unsubscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Result, error)
	Observe(ctx context.Context, in *Identification, opts ...grpc.CallOption) (*RecordSet, error)
}

type routeGuideClient struct {
	cc *grpc.ClientConn
}

func NewRouteGuideClient(cc *grpc.ClientConn) RouteGuideClient {
	return &routeGuideClient{cc}
}

func (c *routeGuideClient) Publish(ctx context.Context, in *PublishRecord, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/routeguide.RouteGuide/Publish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/routeguide.RouteGuide/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) Unsubscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/routeguide.RouteGuide/Unsubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) Observe(ctx context.Context, in *Identification, opts ...grpc.CallOption) (*RecordSet, error) {
	out := new(RecordSet)
	err := grpc.Invoke(ctx, "/routeguide.RouteGuide/Observe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RouteGuide service

type RouteGuideServer interface {
	Publish(context.Context, *PublishRecord) (*Result, error)
	Subscribe(context.Context, *Subscription) (*Result, error)
	Unsubscribe(context.Context, *Subscription) (*Result, error)
	Observe(context.Context, *Identification) (*RecordSet, error)
}

func RegisterRouteGuideServer(s *grpc.Server, srv RouteGuideServer) {
	s.RegisterService(&_RouteGuide_serviceDesc, srv)
}

func _RouteGuide_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routeguide.RouteGuide/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).Publish(ctx, req.(*PublishRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routeguide.RouteGuide/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).Subscribe(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routeguide.RouteGuide/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).Unsubscribe(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_Observe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).Observe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routeguide.RouteGuide/Observe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).Observe(ctx, req.(*Identification))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouteGuide_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routeguide.RouteGuide",
	HandlerType: (*RouteGuideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _RouteGuide_Publish_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _RouteGuide_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _RouteGuide_Unsubscribe_Handler,
		},
		{
			MethodName: "Observe",
			Handler:    _RouteGuide_Observe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gomq.proto",
}

func init() { proto.RegisterFile("gomq.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x14, 0x6c, 0x52, 0xdb, 0x90, 0xd7, 0x5a, 0xe4, 0x89, 0x10, 0x4b, 0x91, 0xb2, 0xa7, 0x0a, 0x52,
	0xa4, 0x9e, 0xb4, 0x28, 0x1e, 0x14, 0xe9, 0x41, 0xd4, 0x14, 0x7f, 0x40, 0x3e, 0x9e, 0x75, 0x31,
	0xc9, 0xc6, 0xec, 0xa6, 0xd0, 0xbb, 0x3f, 0x5c, 0x92, 0xa6, 0x74, 0x63, 0xe9, 0xc5, 0xdb, 0xee,
	0x63, 0x66, 0x76, 0x66, 0xf6, 0x01, 0x2c, 0x44, 0xfc, 0x3d, 0x4e, 0x33, 0xa1, 0x04, 0x42, 0x26,
	0x72, 0x45, 0x8b, 0x9c, 0x87, 0xc4, 0x2e, 0xa1, 0x37, 0x0b, 0x29, 0x51, 0xfc, 0x83, 0x07, 0x9e,
	0xe2, 0x22, 0xc1, 0x33, 0x80, 0x40, 0x24, 0x32, 0x8f, 0x29, 0x9b, 0x3d, 0x38, 0xc6, 0xd0, 0x18,
	0xd9, 0xae, 0x36, 0x61, 0xd7, 0x60, 0xbb, 0x14, 0x88, 0x2c, 0x9c, 0x93, 0xc2, 0x0b, 0xb0, 0xb2,
	0xf2, 0x22, 0x1d, 0x63, 0xd8, 0x1c, 0x75, 0x26, 0x38, 0xde, 0x8a, 0x8f, 0xd7, 0x38, 0x77, 0x03,
	0x61, 0x8f, 0xd0, 0x5e, 0x8f, 0xf0, 0x08, 0x9a, 0x5f, 0xb4, 0xaa, 0xd4, 0x8b, 0x23, 0x9e, 0x43,
	0x6b, 0xe9, 0x45, 0x39, 0x39, 0xe6, 0xd0, 0x18, 0x75, 0x26, 0xc7, 0xba, 0xce, 0x33, 0x49, 0xe9,
	0x2d, 0xc8, 0x5d, 0x23, 0xd8, 0x3d, 0x74, 0xe7, 0xb9, 0x2f, 0x83, 0x8c, 0xa7, 0xa5, 0xe3, 0x5d,
	0xb1, 0x7a, 0x06, 0x73, 0x27, 0xc3, 0x14, 0x0e, 0x5f, 0x73, 0x3f, 0xe2, 0xf2, 0x73, 0xaf, 0x1f,
	0x07, 0xac, 0xd4, 0x5b, 0x45, 0xc2, 0x0b, 0x4b, 0x7e, 0xd7, 0xdd, 0x5c, 0xd9, 0xa0, 0x48, 0x21,
	0xf3, 0x48, 0x21, 0xc2, 0x41, 0x20, 0x42, 0x2a, 0x69, 0x2d, 0xb7, 0x3c, 0xb3, 0x37, 0xb0, 0x2a,
	0xbb, 0xd8, 0x03, 0x93, 0x87, 0x95, 0xa6, 0xc9, 0x43, 0x1c, 0x80, 0xad, 0x78, 0x4c, 0x52, 0x79,
	0x71, 0x5a, 0x99, 0xda, 0x0e, 0xf4, 0x07, 0x9b, 0xb5, 0x07, 0x27, 0x3f, 0x26, 0x80, 0x5b, 0xb4,
	0xf1, 0x54, 0xb4, 0x81, 0x37, 0x60, 0x55, 0xe6, 0xf1, 0x54, 0x6f, 0xa9, 0x96, 0xa8, 0xff, 0xe7,
	0x23, 0x0a, 0xbf, 0xac, 0x81, 0x53, 0xb0, 0xab, 0xea, 0x7c, 0x42, 0x47, 0x87, 0xe8, 0x8d, 0xee,
	0x21, 0xdf, 0x42, 0xe7, 0x3d, 0x91, 0xff, 0xa6, 0xdf, 0x81, 0xf5, 0xe2, 0x4b, 0xca, 0x96, 0x84,
	0x7d, 0x1d, 0x50, 0xdf, 0xbf, 0xfe, 0xc9, 0xee, 0x06, 0xcd, 0x49, 0xb1, 0x86, 0xdf, 0x2e, 0xb7,
	0xf7, 0xea, 0x37, 0x00, 0x00, 0xff, 0xff, 0xf2, 0xa4, 0x90, 0xaf, 0xcb, 0x02, 0x00, 0x00,
}
